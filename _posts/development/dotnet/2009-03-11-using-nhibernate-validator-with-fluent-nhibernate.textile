---
layout: post
title: Using the NHibernate Validator with Fluent NHibernate
---
I'm using both "Fluent NHibernate":http://fluentnhibernate.org/ and "NHibernate Validator":http://nhforge.org/wikis/validator10/default.aspx in a project at work and discovered that getting the two to work together was a little less than obvious. Unfortunately, "documentation":http://nhforge.org/wikis/validator10/nhibernate-validator-1-0-0-documentation.aspx for the NHibernate Validator seems a little thin in this area.

After some conversation in the "nhusers":http://groups.google.com/group/nhusers group with "Fabio Maulo":http://fabiomaulo.blogspot.com/ I arrived at this:

<script src="http://gist.github.com/77853.js"></script>

h3. Explanation

First, use @ExposeConfiguration@ to, well, expose the NHibernate @Configuration@ object.

Then, configure a @ValidatorEngine@ instance with a @NHVConfiguration@ (_not_ the same thing as the NHibernate @Configuration@).

Finally, using the @ValidatorInitializer@, initialize the freshly configured @ValidatorEngine@ along with the NHibernate @Configuration@ instance.

There are a couple of gotchas that I ran into: it was unclear that the NHibernate Validator needed _both_ a configuration step and an initialization step. That was the real show-stopper for me since none of the documentation I found pointed me towards the initialization step. Fabio was kind enough to send me in the direction of the @ValidatorInitializer@.

Secondly, the order of things matters. You must call @Configure()@ on your @ValidatorEngine@ instance prior to calling @ValidatorInitializer.Initialize()@. If you don't nothing happens. No exceptions are thrown, but no integration with NHibernate happens either.

Once its all in place sit back and enjoy the integration! Your validations will be checked by NHibernate on every @INSERT@ and @UPDATE@ _and_, if you set @NHibernate.Validator.Cfg.Environment.ApplyToDDL@ to @"true"@ then any schema generated by NHibernate will include constraints based on your validations. You can further DRY up your mappings and models that way.

h3. Bonus:

These snippets of code are from a larger @Configuration@ class I use to configure and initialize NHibernate, NHibernate Validator, and StructureMap for my applications. Here's that class, feel free to fork and update!

<script src="http://gist.github.com/77861.js"></script>

It has a few overloads of @ConfigureDataAccess@ that are used to support different database initialization needs. The default behavior is to connect to MSSQL Server 2005, but it can also be used for testing and other scenarios that might want a SQLite DB. Here's how that can be done:

<script src="http://gist.github.com/77865.js"></script>